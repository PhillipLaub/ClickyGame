{"version":3,"sources":["components/Card/Card.js","components/Header/Header.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickCount","id","src","image","alt","name","Header","children","score","highscore","Wrapper","App","state","cards","resetGame","setState","console","log","this","map","card","count","swal","button","find","obj","index","sort","Math","random","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"85DAgBeA,G,MAZF,SAAAC,GAAK,OAEhB,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC1D,yBAAKH,UAAU,kBACb,yBAEAI,IAAKL,EAAMM,MAAOC,IAAKP,EAAMQ,WCQpBC,G,MAfA,SAAAT,GAAK,OAClB,yBAAKC,UAAU,UAEb,yBAAKA,UAAU,SAASD,EAAMU,UAC9B,yBAAKT,UAAU,SAAf,UAEUD,EAAMW,OAEhB,yBAAKV,UAAU,aAAf,cAEcD,EAAMY,cCLTC,G,MAJC,SAAAb,GAAK,OACrB,yBAAKC,UAAU,WAAWD,EAAMU,Y,uBCoHjBI,E,2MAhHbC,MAAQ,CACNC,MAAOA,EACPL,MAAO,EACPC,UAAW,G,EAIbK,UAAY,WAkBV,OAhBI,EAAKF,MAAMJ,MAAQ,EAAKI,MAAMH,WAEhC,EAAKM,SAAS,CAAEN,UAAW,EAAKG,MAAMJ,QAAS,WAE7CQ,QAAQC,IAAI,eACZD,QAAQC,IAAIC,KAAKN,MAAMH,cAK3B,EAAKG,MAAMC,MAAMM,KAAI,SAAAC,GAEnB,OADAA,EAAKC,MAAQ,GACN,KAIL,EAAKT,MAAMJ,MAAQ,IAErBc,IAAK,WAAD,iBAAuB,EAAKV,MAAMJ,MAAlC,OAA8C,UAAW,CAC3De,OAAQ,eAGV,EAAKR,SAAS,CAAEP,MAAO,KAChB,IAGPc,IAAK,aAAD,mBAA2B,EAAKV,MAAMJ,MAAtC,OAAkD,UAAW,CAC/De,OAAQ,eAGV,EAAKR,SAAS,CAAEP,MAAO,KAChB,I,EAKXR,WAAa,SAAAC,GAEX,EAAKW,MAAMC,MAAMW,MAAK,SAACC,EAAKC,GAC1B,GAAID,EAAIxB,KAAOA,EAAI,CAEjB,GAA2B,IAAvBY,EAAMa,GAAOL,MAyBf,OAvBAR,EAAMa,GAAOL,MAAQR,EAAMa,GAAOL,MAAQ,EAG1C,EAAKN,SAAS,CAAEP,MAAO,EAAKI,MAAMJ,MAAQ,IAAK,WAI7C,GAFAQ,QAAQC,IAAIC,KAAKN,MAAMJ,OAEnBU,KAAKN,MAAMJ,MAAQ,GAOrB,OALAc,IAAK,WAAD,iBAAuBJ,KAAKN,MAAMJ,MAAlC,OAA8C,UAAW,CAC3De,OAAQ,eAGVL,KAAKH,SAAS,CAAEP,MAAO,KAChB,KAQX,EAAKI,MAAMC,MAAMc,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAKP,EAAKf,iB,wEAQH,IAAD,OAEP,OACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQN,MAAOU,KAAKN,MAAMJ,MAAOC,UAAWS,KAAKN,MAAMH,WAAvD,sCAICS,KAAKN,MAAMC,MAAMM,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAEEpB,WAAY,EAAKA,WAEjBC,GAAImB,EAAKnB,GACT6B,IAAKV,EAAKnB,GACVE,MAAOiB,EAAKjB,gB,GA1GN4B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c2246e06.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//create card method for export, pass in props from App.js\r\nconst Card = props => (\r\n    //When clicked, pass the specific id(card) into the click count function\r\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"imageContainer\">\r\n      <img \r\n      //image source pulls from the json, and alt attaches name from json\r\n      src={props.image} alt={props.name} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n//export for use in app.js\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    {/*pass in all children defined in the Header component tag from App.js*/}\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"score\">\r\n      {/* score and highscore passed down from app.js as props */}\r\n      SCORE: {props.score}\r\n    </div>\r\n    <div className=\"highscore\">\r\n      {/* score and highscore passed down from app.js as props */}\r\n      HIGHSCORE: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Wrapper.css';\r\n\r\n//Inside wrapper component in app.js are Header and Card components, which will be displayed as the props.children inside the wrapper\r\nconst Wrapper = props => (\r\n<div className=\"wrapper\">{props.children}</div>\r\n)\r\n\r\nexport default Wrapper;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\nimport swal from 'sweetalert';\n\nclass App extends Component {\n  //this.state.cards set to access json array\n  state = {\n    cards: cards,\n    score: 0,\n    highscore: 0\n  };\n\n  //Reset Game, function is triggered when same card is click more than once\n  resetGame = () => {\n    //check to see if score is greater than highscore\n    if (this.state.score > this.state.highscore) {\n      //if score is greater, set highscore equal to score\n      this.setState({ highscore: this.state.score }, function() {\n        //console.log highscore\n        console.log(\"Highscore: \");\n        console.log(this.state.highscore);\n      });\n    }\n\n    //set card click count back to zero for all cards\n    this.state.cards.map(card => {\n      card.count = 0;\n      return true;\n    });\n\n    //check to see if user reached score of 12, if so alert win\n    if (this.state.score > 11) {\n      // swal(`You Win! Great Job! \\nSCORE: ${this.state.score}/12`, \"\",\"success\");\n      swal('You Win!', `Score: ${this.state.score}/12`, 'success', {\n        button: \"Start Over\",\n      })\n      //reset score to zero\n      this.setState({ score: 0 });\n      return true;\n    } else {\n      //alert user game over\n      swal('Game Over!', `\\nSCORE: ${this.state.score}/12`, \"warning\", {\n        button: \"Start Over\",\n      });\n      //reset score to zero\n      this.setState({ score: 0 });\n      return true;\n    }\n  };\n\n  //method to check if card has been previously clicked\n  clickCount = id => {\n    //pass in object and index for access\n    this.state.cards.find((obj, index) => {\n      if (obj.id === id) {\n        //if the card click count is equal to zero...\n        if (cards[index].count === 0) {\n          //increase the card click count by one\n          cards[index].count = cards[index].count + 1;\n\n          //increase the score by one\n          this.setState({ score: this.state.score + 1 }, function() {\n            //console log updated score value\n            console.log(this.state.score);\n\n            if (this.state.score > 11) {\n              // swal(`You Win! Great Job! \\nSCORE: ${this.state.score}/12`, \"\",\"success\");\n              swal('You Win!', `Score: ${this.state.score}/12`, 'success', {\n                button: \"Start Over\",\n              })\n              //reset score to zero\n              this.setState({ score: 0 });\n              return true;\n            }\n\n          });\n\n          \n\n          //randomize locations for each card\n          this.state.cards.sort(() => Math.random() - 0.5);\n          return true;\n        }\n\n        //otherwise if click count is not equal to zero(already clicked), reset game\n        else {\n          this.resetGame();\n        }\n      }\n      //eslint-disable-next-line\n      return;\n    });\n  };\n\n  render() {\n    //render components and pass properties\n    return (\n      <Wrapper>\n        {/* Passing properties score and highscore into the Header Component*/}\n        <Header score={this.state.score} highscore={this.state.highscore}>\n          TEEN TITANS GO! TO THE CLICKY GAME\n        </Header>\n        {/* Loop/map through cards json, create 'card' for each, with properties, clickcount, id, key, and image */}\n        {this.state.cards.map(card => (\n          <Card\n            //Pass clickCount property\n            clickCount={this.clickCount}\n            // id and image already defined in the json object, attaching key property to not trigger error in React\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}